5min 44s ± 1.08 s per loop (mean ± std. dev. of 7 runs, 1 loop each)
xgboost classifier

'fasttext-wiki-news-subwords-300' 

{0: desc_rare
business     34
debts        33
lending      32
much         31
late         29
dtype: int64, 1: desc_rare
thanks       13
expenses     10
great         8
live          7
allow         7
dtype: int64, 2: desc_rare
current      31
back         29
much         24
late         22
payoff       22
dtype: int64, 3: desc_rare
much         17
expenses     15
medical      13
able         13
funds        13
dtype: int64, 4: desc_rare
much         40
debts        33
expenses     30
back         29
funds        28
dtype: int64, 5: desc_rare
amount       14
balance      13
business     13
last         12
currently    12
dtype: int64}


{'0': {'precision': 0.8665054016932823,
  'recall': 0.9302156690140845,
  'f1-score': 0.8972309782320289,
  'support': 45440},
 '1': {'precision': 0.13854930725346373,
  'recall': 0.07262888066078041,
  'f1-score': 0.09530038307016725,
  'support': 7022},
 'accuracy': 0.8154283100148679,
 'macro avg': {'precision': 0.502527354473373,
  'recall': 0.5014222748374324,
  'f1-score': 0.4962656806510981,
  'support': 52462},
 'weighted avg': {'precision': 0.769069015448831,
  'recall': 0.8154283100148679,
  'f1-score': 0.7898931596352047,
  'support': 52462}}

{0: desc_rare
business     34
debts        33
lending      32
much         31
late         29
club         27
save         27
last         26
i've         25
back         24
dtype: int64, 1: desc_rare
thanks       13
expenses     10
great         8
live          7
allow         7
way           6
back          6
lending       6
much          6
bill          6
dtype: int64, 2: desc_rare
current      31
back         29
much         24
late         22
payoff       22
business     22
getting      21
trying       20
save         19
financial    19
dtype: int64, 3: desc_rare
much         17
expenses     15
medical      13
able         13
funds        13
balance      13
two          13
back         13
trying       13
due          13
dtype: int64, 4: desc_rare
much         40
debts        33
expenses     30
back         29
funds        28
well         27
currently    27
late         26
current      26
always       25
dtype: int64, 5: desc_rare
amount       14
balance      13
business     13
last         12
currently    12
debts        12
k            11
able         11
great        11
much         11
dtype: int64}
{0: desc_rare
 business     34
 debts        33
 lending      32
 much         31
 late         29
 club         27
 save         27
 last         26
 i've         25
 back         24
 dtype: int64,
 1: desc_rare
 thanks       13
 expenses     10
 great         8
 live          7
 allow         7
 way           6
 back          6
 lending       6
 much          6
 bill          6
 dtype: int64,
 2: desc_rare
 current      31
 back         29
 much         24
 late         22
 payoff       22
 business     22
 getting      21
 trying       20
 save         19
 financial    19
 dtype: int64,
 3: desc_rare
 much         17
 expenses     15
 medical      13
 able         13
 funds        13
 balance      13
 two          13
 back         13
 trying       13
 due          13
 dtype: int64,
 4: desc_rare
 much         40
 debts        33
 expenses     30
 back         29
 funds        28
 well         27
 currently    27
 late         26
 current      26
 always       25
 dtype: int64,
 5: desc_rare
 amount       14
 balance      13
 business     13
 last         12
 currently    12
 debts        12
 k            11
 able         11
 great        11
 much         11
 dtype: int64}

top_c = {}
for c in cluster_frequency:
    top_c[c] = cluster_frequency[c].reset_index()["desc_rare"]
pd.DataFrame(top_c)

array([[42269,  3171],
       [ 6512,   510]], dtype=int64)
       
       
from sklearn.metrics import confusion_matrix 
confusiondata = confusion_matrix(y_test, xgb_predict)
yticklabels = ["Positive", "Negative"]
xticklabels = ["Positive", "Negative"]
ax = plt.axes()
fig = sns.heatmap(confusiondata,linewidths=.5, annot=True, ax=ax, vmin = 0, vmax = 200,cmap="icefire",cbar = False,fmt='g')
ax.set_title("Confusion Matrix for Classification")
figure = fig.get_figure()    

figure.savefig("ConfusionMatrix_nlp.png") 

{'car': {'precision': 0.7684797768479776, 'recall': 0.42254601226993865, 'f1-score': 0.545274616526472, 'support': 1304}, 'credit_card': {'precision': 0.723367097450227, 'recall': 0.16410459587955625, 'f1-score': 0.2675192146224892, 'support': 12620}, 'debt_consolidation': {'precision': 0.6401734372964624, 'recall': 0.9602512212142359, 'f1-score': 0.7682052656260469, 'support': 35825}, 'educational': {'precision': 0.9476744186046512, 'recall': 0.5679442508710801, 'f1-score': 0.7102396514161221, 'support': 287}, 'house': {'precision': 0.7481576417814803, 'recall': 0.5153387773118517, 'f1-score': 0.6102979613173026, 'support': 4531}, 'major_purchase': {'precision': 0.8144736842105263, 'recall': 0.31231079717457116, 'f1-score': 0.4514952589350839, 'support': 1982}, 'medical': {'precision': 0.8373493975903614, 'recall': 0.4218512898330804, 'f1-score': 0.5610494450050454, 'support': 659}, 'moving': {'precision': 0.8741935483870967, 'recall': 0.5103578154425612, 'f1-score': 0.6444708680142687, 'support': 531}, 'other': {'precision': 0.7454954954954955, 'recall': 0.17221644120707597, 'f1-score': 0.27979712595097217, 'support': 3844}, 'renewable_energy': {'precision': 1.0, 'recall': 0.5631067961165048, 'f1-score': 0.7204968944099379, 'support': 103}, 'small_business': {'precision': 0.7874601487778958, 'recall': 0.5686876438986953, 'f1-score': 0.6604278074866311, 'support': 2606}, 'vacation': {'precision': 0.8342245989304813, 'recall': 0.5397923875432526, 'f1-score': 0.6554621848739496, 'support': 289}, 'wedding': {'precision': 0.8076225045372051, 'recall': 0.4463390170511535, 'f1-score': 0.5749354005167958, 'support': 997}, 'accuracy': 0.6632102229406204, 'macro avg': {'precision': 0.8098978269161432, 'recall': 0.4742190035241198, 'f1-score': 0.5730516688231628, 'support': 65578}, 'weighted avg': {'precision': 0.6926786707562606, 'recall': 0.6632102229406204, 'f1-score': 0.6071770663170813, 'support': 65578}}

42min 36s ± 1min 43s per loop (mean ± std. dev. of 7 runs, 1 loop each)

